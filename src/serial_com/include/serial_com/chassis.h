// Generated by gencpp from file serial_com/chassis.msg
// DO NOT EDIT!


#ifndef SERIAL_COM_MESSAGE_CHASSIS_H
#define SERIAL_COM_MESSAGE_CHASSIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial_com
{
template <class ContainerAllocator>
struct chassis_
{
  typedef chassis_<ContainerAllocator> Type;

  chassis_()
    : v1(0.0)
    , v2(0.0)
    , v3(0.0)
    , v4(0.0)
    , yaw_angle(0.0)  {
    }
  chassis_(const ContainerAllocator& _alloc)
    : v1(0.0)
    , v2(0.0)
    , v3(0.0)
    , v4(0.0)
    , yaw_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _v1_type;
  _v1_type v1;

   typedef float _v2_type;
  _v2_type v2;

   typedef float _v3_type;
  _v3_type v3;

   typedef float _v4_type;
  _v4_type v4;

   typedef float _yaw_angle_type;
  _yaw_angle_type yaw_angle;





  typedef boost::shared_ptr< ::serial_com::chassis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial_com::chassis_<ContainerAllocator> const> ConstPtr;

}; // struct chassis_

typedef ::serial_com::chassis_<std::allocator<void> > chassis;

typedef boost::shared_ptr< ::serial_com::chassis > chassisPtr;
typedef boost::shared_ptr< ::serial_com::chassis const> chassisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial_com::chassis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial_com::chassis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial_com::chassis_<ContainerAllocator1> & lhs, const ::serial_com::chassis_<ContainerAllocator2> & rhs)
{
  return lhs.v1 == rhs.v1 &&
    lhs.v2 == rhs.v2 &&
    lhs.v3 == rhs.v3 &&
    lhs.v4 == rhs.v4 &&
    lhs.yaw_angle == rhs.yaw_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial_com::chassis_<ContainerAllocator1> & lhs, const ::serial_com::chassis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial_com

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::serial_com::chassis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial_com::chassis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_com::chassis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial_com::chassis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_com::chassis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial_com::chassis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial_com::chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e16b106a0fe01729efffff8a8f217299";
  }

  static const char* value(const ::serial_com::chassis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe16b106a0fe01729ULL;
  static const uint64_t static_value2 = 0xefffff8a8f217299ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial_com::chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial_com/chassis";
  }

  static const char* value(const ::serial_com::chassis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial_com::chassis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 v1\n"
"float32 v2\n"
"float32 v3\n"
"float32 v4\n"
"float32 yaw_angle\n"
;
  }

  static const char* value(const ::serial_com::chassis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial_com::chassis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v1);
      stream.next(m.v2);
      stream.next(m.v3);
      stream.next(m.v4);
      stream.next(m.yaw_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct chassis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial_com::chassis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial_com::chassis_<ContainerAllocator>& v)
  {
    s << indent << "v1: ";
    Printer<float>::stream(s, indent + "  ", v.v1);
    s << indent << "v2: ";
    Printer<float>::stream(s, indent + "  ", v.v2);
    s << indent << "v3: ";
    Printer<float>::stream(s, indent + "  ", v.v3);
    s << indent << "v4: ";
    Printer<float>::stream(s, indent + "  ", v.v4);
    s << indent << "yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_COM_MESSAGE_CHASSIS_H
